#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_globals() {
  local \
    _OLDPWD
  set \
    -e \
    -u
  shopt \
    -s \
      extglob
  # Control the environment
  umask \
    0022
  export \
    LC_ALL="C.UTF-8"
  # LC_ALL=C.UTF-8, unlike LC_ALL=C,
  # does not override LANGUAGE.
  # See 
  # https://sourceware.org/bugzilla/show_bug.cgi?id=16621
  # and 
  # https://savannah.gnu.org/bugs/?62815
  [[ -v LANGUAGE ]] && \
    unset \
      LANGUAGE
  [[ -v SOURCE_DATE_EPOCH ]] || \
    printf \
      -v \
        SOURCE_DATE_EPOCH \
      '%(%s)T' \
      -1
  export \
    SOURCE_DATE_EPOCH
  
  # Get script path
  # shellcheck disable=SC2005
  _path="$( \
    _OLDPWD="$( \
      pwd)" && \
    export \
      _OLDPWD && \
    cd \
      "$( \
	dirname \
          "${BASH_SOURCE[0]}")" && \
    echo \
      "$(pwd)" && \
    cd \
      "${_OLDPWD}" && \
    unset \
      _OLDPWD)"
  unset \
    _OLDPWD
  # Set application name
  # from the script's file name
  app_name="${0##*/}"
}

# shellcheck disable=SC2034
_global_variables() {
  local \
    _field
  out_file=""
  grub_cfg=""
  cfg_checksum=""
  entry_name=""
  short_name=""
  arch_name=""
  boot_method=""
  unencrypted_uuids=()
  encrypted_uuids=()
  attributes=(
    key
    kernel
    initrd
    ksum
    isum
    name
    drive
    kparams
  )
  for _field in "${attributes[@]}"; do
    declare \
      -g \
      -A \
      "${_field}"
  done
  color=""
  quiet=""
}

# Show an INFO message
# $1: message string
_msg_info() {
  local \
    _msg=(
      "$@"
    ) \
    _fmt_line=() \
    _line
  [[ "${quiet}" == "y" ]] || \
    for _line \
      in "${_msg[@]}"; do
      # _fmt_line+=(
      #   "$( \
      #     printf \
      #       '[%s] INFO: %s\n' \
      #       "${app_name}" \
      #       "${_line}")"
      # )
      _printf \
        '[%s] INFO: %s\n' \
        "${app_name}" \
        "${_line}"
    done
    # _printf \
    #   "${_fmt_line[*]}"
}

# Show a WARNING message
# $1: message string
_msg_warning() {
  local \
    _msg=()
  _msg=(
    "${1}"
  )
  _printf \
    '[%s] WARNING: %s\n' \
    "${app_name}" \
    "${_msg[*]}" >&2
}

# Show an ERROR message then exit with status
# $1: message string
# $2: exit code number (with 0 does not exit)
_msg_error() {
  local \
    _msg=(
      "${1}"
    ) \
    _error=${2}
  _printf \
    '[%s] ERROR: %s\n' \
    "${app_name}" \
    "${_msg[*]}" >&2
  if (( _error > 0 )); then
    exit "${_error}"
  fi
}

# Sets object string attributes
# $1: object
# $2: an object string attribute
# $3: a value
_set() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _value="${3}" \
    _target \
    _ass_target \
    _ass_type
  _target="${_obj}_${_var}"
  _ass_target="${_obj}[${_var}]"
  _ass_type="$( \
    _get_type \
      "${_obj}")"
  [[ "${_ass_type}" == "dict" ]] && \
    _target="${_ass_target}"
  printf \
    -v "${_target}" \
    "%s" \
    "${_value}"
}

# Returns type ('string', 'list', 'dict') given
# its name
# $1: an object
_get_type() {
  local \
    _obj="${1}" \
    _type="string" \
    _declare
  _declare="$( \
    declare \
      -p \
        "${_obj}" 2>&1)"
  [[ \
    "${_declare}" == \
    *"declare:"*"${_obj}"*": not found" ]] && \
    _type="undefined"
  [[ \
    "${_declare}" == \
    "declare -A "* ]] && \
    _type="dict"
  [[ \
    "${_declare}" == \
    "typeset -a"* ]] && \
    _type="array"
  echo \
    "${_type}"
}

# Returns an attribute value for a 
# given object
# $1: an object
# $2: an object attribute
_get() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _ass_target \
    _ass_type \
    _msg \
    _ref \
    _type \
    _target
  _ass_target="${_obj}"
  _target="${_obj}_${_var}"
  _ref="${_target}[@]"
  _ass_ref="${_obj}[${_var}]"
  _type="$( \
    _get_type \
      "${_target}")"
  _ass_type="$( \
    _get_type \
      "${_ass_target}")"
  [[ "${_type}" == "undefined" ]] && \
  [[ "${_ass_type}" == "undefined" ]] && \
  [[ ! -v "${_ass_ref}" ]] && \
    _msg=(
      "Attribute '${_var}' is not defined"
      "for object '${_obj}'") && \
    _msg_error \
      "${_msg[*]}" \
      1
  [[ "${_ass_type}" == "dict" ]] && \
    if [[ -v "${_ass_ref}" ]]; then
      _ref="${_ass_ref}"
    fi
  printf \
    "%s\n" \
    "${!_ref}"
}

_check_cmd(){
  local \
    _cmd="${1}" \
    _cmd_var \
    _flag="" \
    _pkgs=()
  shift \
    1
  _pkgs=(
    "$@"
  )
  _cmd_var="$( \
    printf \
      "%s" \
      "${_cmd}" | \
      sed \
        "s/-/_/g")"
  command \
     -v \
     "${_cmd}" &> /dev/null && \
    printf \
      -v \
        "_${_cmd_var}" \
      "%s" \
      "$( \
        command \
          -v \
          "${_cmd}")" && \
    _flag=true
  [ -e "${_path}/${_cmd}" ] && \
    printf \
      -v \
        "_${_cmd_var}" \
      "%s" \
      "${_path}/${_cmd}" && \
    _flag=true
  if [[ "${_flag}" != "true" ]]; then
    if [[ "${_pkgs[*]}" != "" ]]; then
      _cmd="${_pkgs[*]}"
    fi
    _msg_error \
      "Install ${_cmd}" \
      1
  fi
}

# Reassign an object variable
# if an override variable is defined;
# otherwise it defaults
# to an input default.
# $1: object
# $2: variable
# $3: default value
_set_override() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _default="${3}"
  if [[ -v "override_${_obj}_${_var}" ]]; then
    _set \
      "${_obj}" \
      "${_var}" \
      "$( \
        _get \
	  "override_${_obj}" \
          "${_var}")"
  elif [[ -z \
	    "$( \
	      _get \
	        "${_obj}" \
                "${_var}")" ]]; then
    _set \
      "${_obj}" \
      "${_var}" \
      "${_default}"
  fi
}

# Re-assign an object variable pointing to
# a path if an override variable is defined,
# otherwise it defaults to an input path
# $1: object
# $2: variable
# $3: value (a path)
_override_path() {
  local \
    _obj="${1}" \
    _var="${2}" \
    _value="${3}" \
    _path
  _path="$( \
    realpath \
      -q -- \
      "${_value}" || \
      true)"
  [[ "${_path}" == "" ]] && \
    _msg_error \
      "${_value} is not a valid path." \
      1
  _set_override \
    "${_obj}" \
    "${_var}" \
    "${_value}"
  _set \
    "${_obj}" \
    "${_var}" \
    "$( \
      realpath -- \
        "$( \
	  _get \
	    "${_obj}" \
            "${_var}")")"
}

_requirements() {
  if \
    [[ "$( \
      command \
        -v \
	  "shfmt")" == "" ]]; then
    _msg_warning \
      "'shfmt' not found, unindented output file."
  fi
}

# Load partition table
# and file system modules
_disk_modules() {
  local \
    _cmd=()
  _cmd=(
    insmod
      "part_gpt"
      "part_msdos"
      "fat"
      "iso9660;"
  )
  [[ "$(_get "encrypted" "uuids")" != "" ]] && \
    _cmd+=(
      insmod 
        "cryptodisk"
        "luks2;"
    )
  echo \
    "${_cmd[*]}"
}

# shellcheck disable=SC2016
# Use graphics-mode output
_graphic_modules() {
  local \
    _cmd=()
  _cmd=(
    insmod 
      "all_video"
      "font;"
    if loadfont
         '"${prefix}/fonts/unicode.pf2"' ';' 'then'
      insmod
        'gfxterm;'
      set 
        'gfxmode="auto";'
      terminal_input
        "console;"
      terminal_output
        "gfxterm;"
    fi';'
  )
  echo \
    "${_cmd[*]}"
}

# Enable serial console
_serial_cfg() {
  local \
    _cmd=()
  _cmd=(
    if serial
      --unit=0
      --speed=115200';' 'then'
      terminal_input
        --append serial';'
      terminal_output
        --append serial';'
    fi';'
  )
  echo \
    "${_cmd[*]}"
}

# EFI specific modules
_efi_modules() {
  local \
    _cmd=()
  _cmd=(
    if '[ "${grub_platform}" == "efi" ]' ';' 'then'
      "$(_graphic_modules)"
      "$(_serial_cfg)"
    fi';'
  )
  echo \
    "${_cmd[*]}"
}


_modules() {
  _format \
    "$( \
      _disk_modules && \
      _efi_modules)"
}

_grub_set() {
  local \
    _field="${1}" \
    _uuid="${2}" \
    _cmd=()
  _cmd=(
    'set'
      "${_field}=\"$( \
        _get \
          "${_field}" \
          "${_uuid}")\";"
  )
  echo \
    "${_cmd[*]}"
}

_set_boot_params() {
  for _field \
    in "kernel" \
       "initrd" \
       "key" \
       "ksum" \
       "isum"; do
    _grub_set \
      "${_field}" \
      "${_uuid}"
  done
}

_encrypted_mount_cmd() {
  local \
    _field \
    _cmd=()
  _cmd=(
    'if [ test -e "(crypto0)" ]; then'
      'set'
        'disk="(crypto0)";'
    "else"
      "echo"
        "'Enter passphrase for device (attempt ${_attempt})';"
      "echo"
        '"'"${_label} (${_uuid})"'";'
      'cryptomount'
        '"'"${_uuid//-/}"'";'
    'fi;'
    'if [ test -e "(crypto0)" ]; then'
      'echo'
        '"Device";'
      'echo' 
        '"'"${_label} (${_uuid})"'";'
      'echo'
        '"correctly mounted.";'
      'set'
        'disk="(crypto0)";'

  )
  _cmd+=( "$( \
    _set_boot_params)"
  )
  _cmd+=(
    "else"
       'echo' 
         '"Device not found or incorrect passphrase/key.";'
    "fi;"
  )
  echo \
    "${_cmd[*]}"
}

_encrypted_mount() {
  local \
    _uuid="${1}" \
    _label="${2}" \
    _retries="${3}" \
    _attempt=1
  [[ "${_retries}" == "" ]] && \
    _retries="3"
  while (( "${_attempt}" <= "${_retries}" )); do
    _encrypted_mount_cmd
    _attempt=$(( _attempt + 1))
  done
}

# shellcheck disable=SC2016
_unencrypted_mount() {
  local \
    _uuid="${1}" \
    _label="${2}" \
    _cmd=()
  _cmd=(
    'if [ "${root}" == "memdisk" ]' ';' 'then'
      "echo"
        '"Mounting device;"'
      "echo"
        "'${_label} (${_uuid})';"
      'search'
        '--no-floppy'
        '--set=root'
        '--fs-uuid'
        "'${_uuid}';"
    'fi;'
    'if [ "${root}" != "memdisk" ]; then'
      "$(_set_boot_params)"
    'fi;'
  )
  echo \
    "${_cmd[*]}"
}

__format() {
  local \
    _code="${1}" \
    _tmp;
  if [[ $(command \
        -v \
        "shfmt") != "" ]]; then
    _tmp="$( \
      mktemp)";
    echo \
      "${_code}" > \
      "${_tmp}";
    shfmt \
      -l \
      -w "${_tmp}";
    _code="$( \
      cat \
        "${_tmp}")";
  fi
  printf \
    "\n%s" \
    "${_code}"
}

_format() {
  local \
    _code="${1}"
  __format \
    "${_code}" | \
    tail \
      -n \
      +2
}

_menuentry() {
  local \
    _entry_name="${1}" \
    _id="${2}" \
    _body="${3}" \
    _entry=()
  _entry=(
    'menuentry'
      "'${_entry_name}'"
      '--class'
        'arch'
      '--class'
        'gnu-linux'
      '--class'
        'gnu'
      '--class'
        'os'
      '--id'
        "'${_id}'"
    '{'
  )
  echo \
    "${_entry[*]}"
  _format \
    "${_body}" | \
    sed \
      "s/^/\t/"
  echo \
    "}"
}

_mount() {
  local \
    _type="${1}" \
    _retries="${2}"
  for _uuid \
    in $( \
      _get \
        "${_type}" \
        "uuids"); do
    "_${_type}_mount" \
      "${_uuid}" \
      "$( \
        _get \
          "name" \
          "${_uuid}")" \
      "${_retries}"
  done
}

_shutdown() {
  local \
    _entry=()
  _header=(
    'menuentry'
      '"System shutdown"'
      '--class'
        'shutdown'
      '--class'
        'poweroff' '{'
  )
  _body=(
    'echo'
      '"System shutting down...";'
    'halt;'
  )
  echo \
    "${_header[*]}"
  _format \
    "${_body[*]}" | \
    sed \
      "s/^/\t/"
  echo \
    '}'
}

_restart() {
  local \
    _entry=()
  _header=(
    'menuentry'
      '"System restart"'
      '--class'
        'reboot'
      '--class'
        'restart' '{'
  )
  _body=(
    'echo'
      '"System rebooting...";'
    'reboot;'
  )
  echo \
    "${_header[*]}"
  _format \
    "${_body[*]}" | \
    sed \
      "s/^/\t/"
  echo \
    '}'
}

# shellcheck disable=SC2016
# shellcheck disable=SC1083
_make_menuentry() {
  local \
    _entry_name="${1}" \
    _short_entry="${2}" \
    _arch="${3}" \
    _entry \
    _body=() \
    _header=() \
    _mount_block=() \
    _kernel=() \
    _initrd=()
  _header=(
    'set'
      'gfxpayload=keep;'
  )
  _mount_block=(
    "$( \
      _mount \
        "encrypted" \
        3)"
    "$( \
      _mount \
        "unencrypted" \
        "")"
  )
  _kernel=(
    'linux'
      '"${disk}${_kernel}"'
         "$( \
           _get \
             "kparams" \
             "${_uuid}");"
  )
  _initrd=(
    'initrd'
      '"${disk}${initrd}";'
  )
  _body=(
    "${_entry_header[@]}"
    "${_mount_block[@]}"
    "${_kernel[@]}"
    "${_initrd[@]}"
  )
  _menuentry \
    "${_entry_name} (${_arch})" \
    "${_short_entry}" \
    "${_body[*]}"
}

_default_opts() {
  local \
    _opts=()
  _opts=(
    "default='${_short_entry}';"
    "timeout=${_menu_timeout:-15};"
    'timeout_style="menu";'
  )
  _format \
    "${_opts[*]}"
}

# shellcheck disable=SC2016
# shellcheck disable=SC1083
_make_grub_cfg() {
  local \
    _entry_name="${1}" \
    _short_entry="${2}" \
    _arch="${3}" \
    _out_file="${4}" \
    _cfg
  printf \
    -v \
      "_cfg" \
    "%s\n%s\n%s\n%s\n%s" \
    "$( \
      _modules)" \
    "$( \
      _default_opts)" \
    "$( \
      _make_menuentry \
        "${_entry_name}" \
        "${_short_entry}" \
        "${_arch}")" \
    "$( \
      _shutdown)"  \
    "$( \
      _restart)"
  if [[ "${_out_file}" != "" ]]; then
    echo \
      "${_cfg}"  > \
      "${_out_file}"
  elif [[ "${_out_file}" == "" ]]; then
    _sho \
      "${_cfg}"
  fi
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "out" \
    "file" \
    ""
  _set_override \
    "entry" \
    "name" \
    "Arch Linux"
  _set_override \
    "short" \
    "name" \
    "arch"
  _set_override \
    "arch" \
    "name" \
    "x86_64"
  unencrypted_uuids+=(
    'memdisk'
  )
  _set \
    "name" \
    "memdisk" \
    "efiboot"
  _set \
    "kernel" \
    "memdisk" \
    "/boot/vmlinuz-linux"
  _set \
    "initrd" \
    "memdisk" \
    "/boot/initramfs-linux.img"
  _set \
    "ksum" \
    "memdisk" \
    ""
  _set \
    "isum" \
    "memdisk" \
    ""
  _set \
    "drive" \
    "memdisk" \
    "ssd"
  _set \
    "kparams" \
    "memdisk" \
    ""
  encrypted_uuids+=(
      'boot.img'
  )
  _set \
    "name" \
    "boot.img" \
    "efibootcryptodisk"
  _set \
    "key" \
    "boot.img" \
    "boot.key"
  _set \
    "kernel" \
    "boot.img" \
    "vmlinuz"
  _set \
    "ksum" \
    "boot.img" \
    ""
  _set \
    "isum" \
    "boot.img" \
    ""
  _set \
    "initrd" \
    "boot.img" \
    "initrd.img"
  _set \
    "drive" \
    "boot.img" \
    "ssd"
  _set \
    "kparams" \
    "boot.img" \
    ""
  for _uuid \
    in "${encrypted_uuids[@]}"; do
    [[ \
      "$( \
        _get \
          "key" \
          "${_uuid}")" == "" ]] &&  \
      _set \
        "key" \
        "${_uuid}" \
        "/boot.key"
  done
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
usage:
  $(_get "app" "name")
    [options]
    -U
      <fssuid>
   (-u
      <fsuuid>)
   [boot disk options]
  options:
     -a <arch_name>       Architecture
                          Default: '$(_get "arch" "name")'
     -L <entry_name>      Sets an alternative entry name
                          Default: '$(_get "entry" "name")'
     -l <short_name>      Short entry name.
                          Default: '$(_get "short" "name")'
     -U <fsuuid>          Add an UUID for an encrypted boot disk.
     -u <fsuuid>          Add an UUID for an unencrypted boot disk.
     -o <out>             Output configuration file.
                          Default: print to console
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
  boot disk options:
     -n <name>            Boot disk nickname.
     -K <kernel>          Kernel path inside the boot disk.
     -p                   Kernel parameters
     -k <ksum>            SHA256 sum of the kernel.
     -I <initrd>          Path of the initrd inside the
                          boot disks.
     -i <isum>            SHA256 sum of the initrd.
     -t                   Drive type ('hdd', 'ssd')
                          Default: 'ssd'
     -e <key>             Path of the encryption key inside
                          the boot disk.
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                              ${_flag}"
  done
}

# shellcheck disable=SC2154
_display_devices() {
  local \
    _encrypted="${1}" \
    _uuids=() \
    _uuid \
    _field
  shift \
    1
  _uuids=(
    "$@"
  )
  for _uuid \
    in "${_uuids[@]}"; do
    for _field \
      in "${attributes[@]}"; do
      printf \
        -v \
          "_${_field}" \
        "%s" \
        "$( \
          _get \
            "${_field}" \
            "${_uuid}")"
    done
    _msg_info \
      "                     Name:     ${_name}"
    _msg_info \
      "                     UUID:     ${_uuid}"
    [[ "${_encrypted}" == "true" ]] && \
      _msg_info \
        "                      Key:     ${_key:-Passphrase}"
    _msg_info \
      "                   Kernel:     ${_kernel}"
    _msg_info \
      "                   Initrd:     ${_initrd}"
    _msg_info \
      "          Kernel checksum:     ${_ksum:-None}"
    _msg_info \
      "          Initrd checksum:     ${_isum:-None}"
    _msg_info \
      "               Drive type:     ${_drive}"
    _msg_info \
      "        Kernel Parameters:     ${_kparams}"

    _msg_info \
      ""
  done
}

# Shows configuration options.
_show_config() {
  local \
    _build_date
  # shellcheck disable=SC2207
  _out_file="$( \
    _get \
      "out" \
      "file")"
  [[ \
    "${_out_file}" == "" ]] && \
    _out_file="stdout"
  TZ=UTC \
    printf \
      -v _build_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "               Build Date:   $(_get "_build" "date")"
  _msg_info "             Architecture:   $(_get "arch" "name")"
  _msg_info "               Entry name:   $(_get "entry" "name")"
  _msg_info "               Short name:   $(_get "short" "name")"
  _msg_info "         Encrypted drives:"
  _msg_info ""
  _display_devices                "true"  "${encrypted_uuids[@]}"
  _msg_info "       Unencrypted drives:"
  _msg_info ""
  _display_devices               "false"  "${unencrypted_uuids[@]}"
  _msg_info "              Output file:   ${_out_file}"
}

# Colorized print
_printf() {
  local \
    _args=()
    _pygmentize_opts=()
  _pygmentize_opts=(
    -g
    -O style=emacs
  )
  _args=(
      "$@"
  )
  # shellcheck disable=SC2059
  _sho \
    "$( \
      printf \
        "${_args[@]}")" \
    "${_pygmentize_opts[@]}"
}

# Colorized Display function
_sho() {
  local \
    _text="${1}" \
    _pygmentize
  _pygmentize="$( \
    command \
      -v \
      "pygmentize"{,2} | \
      head \
        -n \
	1)"
  shift
  _pygmentize_opts=(
    "$@"
  )
  [[ "${color}" == "y" ]] && \
  [[ "${_pygmentize}" != "" ]] && \
    echo \
      "${_text}" | 
      "${_pygmentize}" \
        "${_pygmentize_opts[@]}" && \
    return
  printf \
    "%s\n" \
    "${_text}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'a:L:l:U:u:K:k:I:i:n:e:t:p:o:cvh?' \
    arg; do
  case \
    "${arg}" in
    a) override_arch_name="${OPTARG}" ;;
    L) override_entry_name="${OPTARG}" ;;
    l) override_short_name="${OPTARG}" ;;
    U) _uuid="${OPTARG}" && \
       encrypted_uuids+=(
         "${_uuid}"
       );;
    u) _uuid="${OPTARG}" && \
       unencrypted_uuids+=(
	 "${_uuid}"
       );;
    K) kernel[${_uuid}]="${OPTARG}";;
    k) ksum[${_uuid}]="${OPTARG}";;
    I) initrd[${_uuid}]="${OPTARG}";;
    i) isum[${_uuid}]="${OPTARG}";;
    n) name[${_uuid}]="${OPTARG}";;  
    e) key[${_uuid}]="${OPTARG}";;
    t) drive[${_uuid}]="${OPTARG}";;
    p) kparams[${_uuid}]="${OPTARG}";;
    o) override_out_file="${OPTARG}";;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
# shellcheck disable=SC2034
(( ${#} == 0 )) && \
  out=""
# shellcheck disable=SC2034
(( ${#} != 0 )) && \
  out="$( \
    realpath \
      -q -- \
      "${1}")"
_set_overrides
_show_config
_make_grub_cfg \
  "$( \
    _get \
      "entry" \
      "name")" \
  "$( \
    _get \
      "short" \
      "name")" \
  "$( \
    _get \
      "arch" \
      "name")" \
  "$( \
    _get \
      "out" \
      "file")"
# vim:set sw=2 sts=-1 et:
